using System;
using MugenMvvm.Bindings.Enums;
using MugenMvvm.Bindings.Interfaces.Members;
using MugenMvvm.Bindings.Members.Builders;
using MugenMvvm.Internal;
using MugenMvvm.Tests.Bindings.Observation;
using Should;
using Xunit;
using Xunit.Abstractions;

namespace MugenMvvm.UnitTests.Bindings.Members.Builders
{
    [Collection(SharedContext)]
    public class EventBuilderTest : UnitTestBase
    {
        public EventBuilderTest(ITestOutputHelper? outputHelper = null) : base(outputHelper)
        {
            RegisterDisposeToken(WithGlobalService(AttachedValueManager));
            RegisterDisposeToken(WithGlobalService(WeakReferenceManager));
        }

        [Theory]
        [InlineData(true, true)]
        [InlineData(true, false)]
        [InlineData(false, true)]
        [InlineData(false, false)]
        public void AutoGeneratedShouldRaise(bool withAttachedHandler, bool isStatic)
        {
            var message = "m";
            var target = isStatic ? null : new object();
            var attachedInvokeCount = 0;
            INotifiableMemberInfo? memberInfo = null;
            var builder = new EventBuilder<object>(NewId(), typeof(object), typeof(EventHandler));
            if (withAttachedHandler)
            {
                builder = builder.AttachedHandler((member, t, metadata) =>
                {
                    ++attachedInvokeCount;
                    member.ShouldEqual(memberInfo);
                    t.ShouldEqual(target);
                    metadata.ShouldEqual(Metadata);
                });
            }

            if (isStatic)
                builder.Static();
            memberInfo = builder.Build();
            var testEventHandler = new TestWeakEventListener
            {
                TryHandle = (t, msg, metadata) =>
                {
                    t.ShouldEqual(isStatic ? typeof(object) : target);
                    message.ShouldEqual(msg);
                    metadata.ShouldEqual(Metadata);
                    return true;
                }
            };
            var actionToken = memberInfo.TryObserve(target, testEventHandler, Metadata);
            memberInfo.Raise(target, message, Metadata);
            testEventHandler.InvokeCount.ShouldEqual(1);
            if (withAttachedHandler)
                attachedInvokeCount.ShouldEqual(1);

            actionToken.Dispose();
            memberInfo.Raise(target, message, Metadata);
            testEventHandler.InvokeCount.ShouldEqual(1);
            if (withAttachedHandler)
            {
                memberInfo.TryObserve(target, testEventHandler, Metadata);
                attachedInvokeCount.ShouldEqual(1);
            }
        }

        [Theory]
        [InlineData(true)]
        [InlineData(false)]
        public void ConstructorShouldInitializeValues(bool isStatic)
        {
            string name = "t";
            Type declaringType = typeof(object);
            var eventType = typeof(Action);
            var member = new object();
            var builder = new EventBuilder<object>(name, declaringType, eventType).UnderlyingMember(member);
            if (isStatic)
                builder = builder.Static();
            var build = builder.Build();
            build.MemberType.ShouldEqual(MemberType.Event);
            build.Type.ShouldEqual(eventType);
            build.DeclaringType.ShouldEqual(declaringType);
            build.MemberFlags.ShouldEqual(isStatic ? MemberFlags.Attached | MemberFlags.StaticPublic : MemberFlags.Attached | MemberFlags.InstancePublic);
            build.UnderlyingMember.ShouldEqual(member);
            build.Name.ShouldEqual(name);
        }

        [Theory]
        [InlineData(true, false)]
        [InlineData(false, true)]
        [InlineData(false, false)]
        [InlineData(true, true)]
        public void CustomShouldUseDelegates(bool withAttachedHandler, bool isStatic)
        {
            var message = "m";
            var target = isStatic ? null : new object();
            var testEventHandler = new TestWeakEventListener();
            var attachedInvokeCount = 0;
            var invokeCount = 0;
            var raiseInvokeCount = 0;
            var result = ActionToken.FromDelegate((o, o1) => { });
            INotifiableMemberInfo? memberInfo = null;
            var builder = new EventBuilder<object>("t", typeof(object), typeof(EventHandler)).CustomImplementation((member, o, listener, metadata) =>
            {
                ++invokeCount;
                member.ShouldEqual(memberInfo);
                o.ShouldEqual(target);
                listener.ShouldEqual(testEventHandler);
                metadata.ShouldEqual(Metadata);
                return result;
            }, (member, o, msg, metadata) =>
            {
                ++raiseInvokeCount;
                member.ShouldEqual(memberInfo);
                o.ShouldEqual(target);
                msg.ShouldEqual(message);
                metadata.ShouldEqual(Metadata);
            });
            if (withAttachedHandler)
            {
                builder = builder.AttachedHandler((member, t, metadata) =>
                {
                    ++attachedInvokeCount;
                    member.ShouldEqual(memberInfo);
                    t.ShouldEqual(target);
                    metadata.ShouldEqual(Metadata);
                });
            }

            if (isStatic)
                builder = builder.Static();
            memberInfo = builder.Build();
            memberInfo.TryObserve(target, testEventHandler, Metadata).ShouldEqual(result);
            invokeCount.ShouldEqual(1);
            raiseInvokeCount.ShouldEqual(0);
            memberInfo.Raise(target, message, Metadata);
            invokeCount.ShouldEqual(1);
            raiseInvokeCount.ShouldEqual(1);
            if (withAttachedHandler)
                attachedInvokeCount.ShouldEqual(1);

            if (withAttachedHandler)
            {
                memberInfo.TryObserve(target, testEventHandler, Metadata);
                attachedInvokeCount.ShouldEqual(1);
            }
        }
    }
}